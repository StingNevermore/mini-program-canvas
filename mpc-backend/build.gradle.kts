plugins {
    `lifecycle-base`
}

abstract class TextConcat : DefaultTask() {

    @get:Incremental
    @get:InputDirectory
    @get:PathSensitive(PathSensitivity.NAME_ONLY)
    abstract val inputDir: DirectoryProperty

    @get:OutputFile
    abstract val outputFile: RegularFileProperty

    @TaskAction
    fun execute(inputChanges: InputChanges) {
        val fileChanges = inputChanges.getFileChanges(inputDir)
        if (fileChanges.any()) {
            outputFile.get().asFile.writeText("# do not edit this file!")
            outputFile.get().asFile.appendText("\n")
            inputDir.get().asFile.listFiles()?.filter { it.name.endsWith(".sql") }?.forEach { sqlFile ->
                outputFile.get().asFile
                    .apply {
                        appendText("\n")
                        appendText("# ${sqlFile.name}\n")
                        appendText(sqlFile.readText())
                    }
            }
        }
    }
}


configureLifecycleTasks()

fun configureLifecycleTasks() {
    val lifecycleTasks = arrayOf("clean", "build", "assemble")

    lifecycleTasks.forEach { configureLifecycleTask(it) }
}

private fun configureLifecycleTask(taskName: String) {
    tasks.getByName(taskName) {
        subprojects.forEach { subproject ->
            subproject.afterEvaluate {
                tasks.findByName(taskName)?.let { dependsOn(it) }
            }
        }
    }
}

tasks.register<TextConcat>("generateSqlAggregationFile") {
    inputDir = file("${rootDir}/sql")
    outputFile = project.layout.buildDirectory.file("sql/aggregation.sql")
}
